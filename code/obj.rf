( 
 Object type programming in Forth 
 Simplistic object using create.does>
)

: Point create , , does> dup @ swap 1 cells + @ ;
: pt_add ( x y a b -- x+a y+b ) >r >r swap r> + swap r> + ;
: pt_set-y ( n dp -- )	>body 2 cells - ! ;
: pt_set-x ( n dp -- )	>body 1 cells - ! ;
: pt_reset ( y x pfa -- ) dup rot swap pt_set-x pt_set-y ;

( 
  a struct like object
)

: {{ 1 ; ( -- n )
: field ( off -- off++ ) dup ++ swap cells create , does> @ + ;
: const ( off -- off++ ) dup ++ swap cells create , does> @ + @ ;
: method ( off -- off++ ) dup ++ swap cells create , does> @ over + @ dup if execute else ." unimplemented method" cr then ;
: .tag ( pfa -- ) @ ;
: }} ( siz -- ) word save dup lambda , , does> dup @ create , 1 cells + @ allot does> ;

: @++ ( ptr -- ptr+1) dup @ swap 1 cells + ;
: !++ ( ptr val -- ptr++ ) over ! 1 cells + ;
