( 

  Terminal escape sequences

  These words implement the ANS vt100 terminal escape commands using
  a simple format string (built backwards).
)

.( ::: loading ansi library ) cr

" obj.rf" infile

0x1b constant esc
0x5b constant lbr

{{
  const >ul
  const >ur
  const >ll
  const >lr
  const >hl
  const >vl
  const >jl
  const >jr
}} BoxStyle

\ create lookup tables for the unicode characters used in box construction.

\ single box
BoxStyle s_single
	s_single  1 cells + 0x250c !++ 0x2510 !++ 0x2514 !++ 0x2518 !++ 0x2500 !++ 0x2502 !++ 0x251c !++ 0x2524 !++ drop

\ double box
BoxStyle s_double
	s_double  1 cells + 0x2554 !++ 0x2557 !++ 0x255a !++ 0x255d !++ 0x2550 !++ 0x2551 !++ 0x2560 !++ 0x2563 !++ drop

\ rounded corner box
BoxStyle s_rounded
	s_rounded 1 cells + 0x256d !++ 0x256e !++ 0x2570 !++ 0x256f !++ 0x2500 !++ 0x2502 !++ 0x251c !++ 0x2524 !++ drop

\ bold box
BoxStyle s_bold
	s_bold    1 cells + 0x250f !++ 0x2513 !++ 0x2517 !++ 0x251b !++ 0x2501 !++ 0x2503 !++ 0x2523 !++ 0x252b !++ drop

\ get coordinates from the ESC[<y>;<x>R sequence returned by t_cloc
: parse_cursor_coordinates ( -- y x ) 
	buf drop 2 + 
	0 >r
	begin 
		dup c@ ascii ; over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	++
	0 >r
	begin 
		dup c@ ascii R over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	drop
	r> r> swap
;

\ building the ANSI terminal escape sequences backwards
: t_to ( y x -- )   <# ascii H hold #s drop over ascii ; hold #s lbr hold esc hold #> type drop ;
: t_up ( n -- )     <# ascii A hold #s lbr hold esc hold #> type ;
: t_down ( n -- )   <# ascii B hold #s lbr hold esc hold #> type ;
: t_fwd ( n -- )    <# ascii C hold #s lbr hold esc hold #> type ;
: t_bwd ( n -- )    <# ascii D hold #s lbr hold esc hold #> type ;
: t_c_sav ( -- )  0 <# ascii s hold lbr hold esc hold #> type ;
: t_c_ret ( -- )  0 <# ascii u hold lbr hold esc hold #> type ;
: t_clear ( -- )  2 <# ascii J hold #s lbr hold esc hold #> type 0 0 t_to ;
: t_cloc ( -- )  6 <# ascii n hold #s lbr hold esc hold #> type
	buf drop
	begin
	  key ascii R over
	  != while
	    over c! ++
	repeat
	swap c! parse_cursor_coordinates
;
: t_size ( -- y x ) 999 999 t_to t_cloc ;


\ create data objects with methods using the obj.rf library

{{
  field .position 
	-- method >at
  field .style
	-- method >style
  field .height
	-- const .ht
  field .width
	-- const .wd
  field .draw
	-- method >draw
}} Box

: draw_box ( adr -- )
	>at t_to 
	>style >ul emit
	dup .wd 2 - 0 do
		>style >hl emit
	loop
	>style >ur emit
	dup .ht >r 
	>at r> 0 pt_add t_to 
	>style >ll emit
	dup .wd 2 - 0 do
		>style >hl emit
	loop
 	>style >lr emit
	>at 1 0 pt_add t_to
	dup .ht 1 do
		>at i 0 pt_add t_to 
		>style >vl emit
		dup .wd 2 - t_fwd 
		>style >vl emit
	loop 
	drop
;

10 10 Point bold_loc 
12 12 Point single_loc
14 14 Point cool_loc
16 16 Point double_loc

Box bld
	' bold_loc	bld .position !
	' s_bold  	bld .style !
	' draw_box	bld .draw !
			82	bld .width !
			22	bld .height !

Box sng 
	' single_loc sng .position !
	' s_single	sng .style !
	' draw_box	sng .draw !
		 	78 	sng .width !
		 	18 	sng .height !

Box round
	' cool_loc	round .position !
	' s_rounded	round .style !
	' draw_box	round .draw !
		 	74 	round .width !
		 	14 	round .height !

Box dbl 
	' double_loc dbl .position !
	' s_double	dbl .style !
	' draw_box	dbl .draw !
		 	70 	dbl .width !
		 	10 	dbl .height !

: draw_all
	utime
	dbl >draw
	round >draw
	sng >draw
	bld >draw
	utime swap - . ." usecs" cr cr
;
