( 

  ## Terminal escape sequences ## 

  These words implement the ANS vt100 terminal escape commands using
  a simple format string (built backwards).
)

( =============== )
0x1b constant esc
0x5b constant lbr

( =============== )
0 cells constant ul
1 cells constant ur
2 cells constant ll
3 cells constant lr
4 cells constant hl
5 cells constant vl
6 cells constant jl
7 cells constant jr

( =============== )
create single_box
	0x250c , 0x2510 , 0x2514 , 0x2518 , 0x2500 , 0x2502 , 0x251c , 0x2524 ,

create double_box
	0x2554 , 0x2557 , 0x255a , 0x255d , 0x2550 , 0x2551 , 0x2560 , 0x2563 ,

create cool_box
	0x256d , 0x256e , 0x2570 , 0x256f , 0x2500 , 0x2502 , 0x251c , 0x2524 ,

create bold_box
	0x250f , 0x2513 , 0x2517 , 0x251b , 0x2501 , 0x2503 , 0x2523 , 0x252b ,

( =============== )
( get coordinates from the ESC[<y>;<x>R sequence returned by t_c_loc ... )
: parse_cursor_coordinates ( -- y x ) 
	tmp drop 2 + 
	0 >r
	begin 
		dup c@ ascii ; over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	++
	0 >r
	begin 
		dup c@ ascii R over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	drop
	r> r> swap
;

: Point create , , does> dup @ swap 1 cells + @ ;
: t_to ( y x -- )   <# ascii H hold #s drop over ascii ; hold #s lbr hold esc hold #> type drop ;
: t_up ( n -- )     <# ascii A hold #s lbr hold esc hold #> type ;
: t_down ( n -- )   <# ascii B hold #s lbr hold esc hold #> type ;
: t_fwd ( n -- )    <# ascii C hold #s lbr hold esc hold #> type ;
: t_bwd ( n -- )    <# ascii D hold #s lbr hold esc hold #> type ;
: t_c_sav ( -- )  0 <# ascii s hold lbr hold esc hold #> type ;
: t_c_ret ( -- )  0 <# ascii u hold lbr hold esc hold #> type ;
: t_clear ( -- )  2 <# ascii J hold #s lbr hold esc hold #> type 0 0 t_to ;
: t_c_loc ( -- )  6 <# ascii n hold #s lbr hold esc hold #> type
	tmp drop
	begin
	  key ascii R over
	  != while
	    over c! ++
	repeat
	swap c! parse_cursor_coordinates
;
: t_size ( -- y x ) 999 999 t_to t_c_loc ;


( =============== )
0 cells constant at
1 cells constant style
2 cells constant height
3 cells constant width
4 cells constant method

: p+ ( x y a b -- x+a y+b ) >r >r swap r> + swap r> + ;
: Box create 5 allot ;

( =============== )
10 10 Point bold
12 12 Point single
14 14 Point cool
16 16 Point double

: box_pos dup at + @ execute ;
: box_style dup style + @ execute ;
: paint dup method + @ execute ;
: box_height dup height + @ ;
: box_width dup width + @ ;
: box_ul box_style ul + @ emit ;
: box_ur box_style ur + @ emit ;
: box_ll box_style ll + @ emit ;
: box_lr box_style lr + @ emit ;
: box_hz box_style hl + @ emit ;
: box_vt box_style vl + @ emit ;

: draw_box ( adr -- )
	box_pos t_to box_ul
	box_width 2 - 0 do
		box_hz 
	loop
	box_ur
	box_height >r 
	box_pos r> 0 p+ t_to 
	box_ll
	box_width 2 - 0 do
		box_hz
	loop
 	box_lr
	box_pos 1 0 p+ t_to
	box_height 1 do
		box_pos i 0 p+ t_to box_vt
		box_width 2 - t_fwd box_vt
	loop 
	drop
;


( create box objects )
( ================== )
Box bld
	' bold bld at + !
	' bold_box bld style + !
	' draw_box bld method + !
	82 bld width + !
	22 bld height + !

Box sng 
	' single sng at + !
	' single_box sng style + !
	' draw_box sng method + !
	78 sng width + !
	18 sng height + !

Box kul 
	' cool kul at + !
	' cool_box kul style + !
	' draw_box kul method + !
	74 kul width + !
	14 kul height + !

Box dbl 
	' double dbl at + !
	' double_box dbl style + !
	' draw_box dbl method + !
	70 dbl width + !
	10 dbl height + !

: draw
	dbl paint
	kul paint
	sng paint
	bld paint
;
