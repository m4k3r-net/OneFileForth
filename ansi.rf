( 

  ## Terminal escape sequences ## 

  These words implement the ANS vt100 terminal escape commands using
  a simple format string (built backwards).
)

( =============== )
0x1b constant esc
0x5b constant lbr

( =============== )
0x2500 constant bx_Hor
0x2502 constant bx_Ver
0x250c constant bx_Upl
0x2510 constant bx_Upr
0x2514 constant bx_Lwl
0x2518 constant bx_Lwr
0x251c constant bx_Vsl
0x2524 constant bx_Vsr

( =============== )
0 cells constant ul
1 cells constant ur
2 cells constant ll
3 cells constant lr
4 cells constant hl
5 cells constant vl
6 cells constant jl
7 cells constant jr

( =============== )
0 cells constant at
1 cells constant style
2 cells constant height
3 cells constant width

( =============== )
create single_box
	bx_Upl ,
	bx_Upr ,
	bx_Lwl ,
	bx_Lwr ,
	bx_Hor ,
	bx_Ver ,
	bx_Vsl ,
	bx_Vsr ,

( =============== )
( get coordinates from the ESC[<y>;<x>R sequence returned by t_c_loc ... )
: parse_cursor_coordinates ( -- y x ) 
	tmp drop 2 + 
	0 >r
	begin 
		dup c@ ascii ; over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	++
	0 >r
	begin 
		dup c@ ascii R over != while
			ascii 0 - r> dup 0 != if 10 * then + >r ++
	repeat 
	drop
	drop
	r> r> swap
;

: Point create , , does> dup @ swap 1 cells + @ ;
: t_to ( y x -- )   <# ascii H hold #s drop over ascii ; hold #s lbr hold esc hold #> type drop ;
: t_up ( n -- )     <# ascii A hold #s lbr hold esc hold #> type ;
: t_down ( n -- )   <# ascii B hold #s lbr hold esc hold #> type ;
: t_fwd ( n -- )    <# ascii C hold #s lbr hold esc hold #> type ;
: t_bwd ( n -- )    <# ascii D hold #s lbr hold esc hold #> type ;
: t_c_sav ( -- )  0 <# ascii s hold lbr hold esc hold #> type ;
: t_c_ret ( -- )  0 <# ascii u hold lbr hold esc hold #> type ;
: t_clear ( -- )  2 <# ascii J hold #s lbr hold esc hold #> type 0 0 t_to ;
: t_c_loc ( -- )  6 <# ascii n hold #s lbr hold esc hold #> type
	tmp drop
	begin
		key ascii R over != while
			over c! ++
	repeat
	swap c! parse_cursor_coordinates
;

: t_size ( -- y x )
  999 999 t_to t_c_loc
;

: p+ ( x y a b -- x+a y+b ) >r >r swap r> + swap r> + ;
: Box create 4 allot ;

( =============== )
10 10 Point boxpos
Box x
	' boxpos x at + !
	' single_box x style + !
	82 x width + !
	22 x height + !

: box_pos dup at + @ execute ;
: box_style dup style + @ execute ;
: box_height dup height + @ ;
: box_width dup width + @ ;
: box_ul box_style ul + @ emit ;
: box_ur box_style ur + @ emit ;
: box_ll box_style ll + @ emit ;
: box_lr box_style lr + @ emit ;
: box_hz box_style hl + @ emit ;
: box_vt box_style vl + @ emit ;

: draw_box ( box -- )
	box_pos t_to box_ul
	box_width 2 - 0 do
		box_hz 
	loop
	box_ur
	box_height >r 
	box_pos r> 0 p+ t_to 
	box_ll
	box_width 2 - 0 do
		box_hz
	loop
 	box_lr
	box_pos 1 0 p+ t_to
	box_height 1 do
		box_pos i 0 p+ t_to box_vt
		box_width 2 - t_fwd box_vt
	loop 
;
