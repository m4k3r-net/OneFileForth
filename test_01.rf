.( ::: loading library interface ::: ) cr

0 constant off
1 constant on

: code_trace ( flg -- :: set trace on or off )
  trace !
;

: load ( <str> | NULL -- :: creates lib ptr )
  dlopen constant
;

: entry ( <lib> <str> -- <ptr> :: looks up a symbol in library )
  dlsym dup 0 == if
       dlerror type cr
  then
;

: code ( ptr n -- :: creates new forth word to call C code in ptr with n args )
  create
     , ,
  does>
     dup @ swap 1 cells + @
     native
;

: showkeys begin key dup ascii x == if . ." Exit" cr leave then . begin ?key while key . repeat again ;

: times ( xt n --  :: execute token n times the hard way )
   0 begin
      over over - while
            3 pick execute ++
      repeat
   drop drop drop
;
: timex ( xt n --  :: execute token n times more efficiently )
   0 do
       dup execute
   loop
   drop
;


.( ::: pass a path or NULL to load ::: ) cr
.( ::: NULL means loading libc library as _libc ::: ) cr
0 load _libc

.( ::: perform entry lookups on local text ::: ) cr
_libc " getuid"		entry 0 code uid
_libc " getgid"		entry 0 code gid
_libc " time"		entry 1 code tick
_libc " clock"		entry 0 code clock
_libc " calloc" 	entry 2 code allocate
_libc " free" 		entry 1 code free
_libc " system" 	entry 1 code shell
_libc " gettimeofday"	entry 2 code tod
_libc " getenv"		entry 1 code env
_libc " popen"		entry 2 code popen
_libc " pclose"		entry 1 code pclose
_libc " fileno"		entry 1 code fileno


." uid = " uid . cr
." gid = " gid . cr

." USER = "
" USER" env type cr

: .uid ( -- )
  uid .
;

utime ' .uid 10 times utime swap - . ." usecs" cr
utime ' .uid 10 timex utime swap - . ." usecs" cr

.( ::: create string constants for later use ::: ) cr
" /bin/ls ./*" save constant ls
" r" save constant read_only

: get_io  ( fd -- )
   begin
    dup 0 10000 waitrdy if  	( fd -- fd )	( duplicate the file descriptor, wait 0. sec and 10000 usecs for i/o )
          dup 1000 rcvtty if	( fd -- fd )	( receive up to 1000 characters )
              type cr		( fd addr -- fd ) ( just output it for now )
          else
              ." <EOF> on input" cr drop leave
          then
    then
   again
;

off code_trace
.( ::: open a pipe to the ls command ::: ) cr
ls read_only popen constant fptr
." file pointer: " fptr . ." converts to fd: "
fptr fileno dup . cr get_io
." closing pipe:" fptr pclose . ." worked." drop cr

freespace forget freespace swap - . ." bytes returned" cr
forget words bye
