( --- Object type programming in Forth -- )

: Point create , , does> dup @ swap 1 cells + @ ;

: pt_add ( x y a b -- x+a y+b ) >r >r swap r> + swap r> + ;
: pt_set-y ( n dp -- )	>body 2 cells - ! ;
: pt_set-x ( n dp -- )	>body 1 cells - ! ;
: pt_reset ( y x pfa -- ) dup rot swap pt_set-x pt_set-y ;

: tag @ ;
: {{ 1 ;
: var dup ++ swap cells create , does> @ ;
: vrb var ;
: get ( pfa off -- val ) + @ ;
: set ( n pfa off -- ) + ! ;
: do ( pfa off -- ) + @ execute ;
: go do ;
( rewrite this using new create => lambda, save the class name, and insert it into
the tag field of the created object in the first offset for ALL objects )
( : }} create , does> @ create allot does> ; )

: }} ( siz -- ) 
		word save dup lambda , , does> dup @ create , 1 cells + @ allot does> ;

{{ 
  var .pos
  var .style
  vrb .draw
  vrb .erase
  vrb .move 
}} Box

